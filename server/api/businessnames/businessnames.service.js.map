{"version":3,"sources":["../../../../server/api/businessnames/businessnames.service.js"],"names":[],"mappings":"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","file":"businessnames.service.js","sourcesContent":["\n'use strict';\n\nimport _ from 'lodash';\nimport request from 'request-promise';\nimport cheerio from 'cheerio';\nimport he from 'he';\n\nconst BUSINESSNAMES_URL = `https://www.business.govt.nz/companies/app/ui/pages/companies/search?q={{query}}&entityTypes=ALL&entityStatusGroups=ALL&incorpFrom=&incorpTo=&addressTypes=ALL&addressKeyword=&start=0&limit=50&sf=&sd=&advancedPanel=false&mode=standard`;\n\n\nexport function search(query){\n  return Promise.resolve()\n    .then(() => {\n      return request(getBusinessnamesRequest(query))\n      .then(parseBusinessnamesFromResponse);\n    });\n}\n\nfunction parseBusinessnamesFromResponse(response){\n\n  if(!response){throw new Error('No response passed to parse business names');}\n\n  try {\n    let $ = cheerio.load(response);\n\n    return _.map($('.dataList > table > tbody > tr'), (element, index) => {\n      let $element = $(element);\n\n      let [companyNumber, businessNumber, status] = parseInfo(getHtmlFromElement($, $element, '.entityInfo'));\n\n      return {\n        name: getHtmlFromElement($, $element, '.entityName'),\n        companyNumber,\n        businessNumber,\n        status,\n        type: getHtmlFromElement($, $element, '.entityType'),\n        date: getHtmlFromElement($, $element, '.incorporationDate label'),\n        address: getHtmlFromElement($, $element, 'div > div')\n      };\n    });\n  }\n  catch(err){\n    console.error('Error parsing business names from response', err);\n    throw err;\n  }\n}\n\nfunction getHtmlFromElement($, $element, cssIdentifier){\n  return he.decode(($($element.find(cssIdentifier).get(0)).html() || '').trim());\n}\n\nfunction parseInfo(infoHtml = ''){\n  return _(infoHtml.split(/\\((\\s*)\\)|\\(NZBN:(\\s*)|<span class=\"entityType\">|<\\/span>/))\n    .filter()\n    .map(string => {return string && string.trim().split(/\\(|\\)/);})\n    .flatten()\n    .filter()\n    .map(string => {return string && string.trim();})\n    .filter()\n    .value();\n}\n\nfunction getBusinessnamesRequest(query){\n  return _.merge({ uri: getBusinessnamesUrl(query) }, getBaseRequest());\n}\n\nfunction getBaseRequest(){\n  return {\n    rejectUnauthorized: false,\n    requestCert: true,\n    json: true\n  }\n}\n\nfunction getBusinessnamesUrl(query){\n  if(!query){throw new Error('No query passed to business names url');}\n  return BUSINESSNAMES_URL.replace('{{query}}', query);\n}\n"]}